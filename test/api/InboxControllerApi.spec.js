/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

// CommonJS-like environments that support module.exports, like Node.
factory(require('expect.js'), require(process.cwd()+'/src/index'));

'use strict';

var instance;

beforeEach(function() {
  instance = new MailslurpJavascriptApollo.InboxControllerApi();
});

var getProperty = function(object, getter, property) {
  // Use getter method if present; otherwise, get the property directly.
  if (typeof object[getter] === 'function')
    return object[getter]();
  else
    return object[property];
}

var setProperty = function(object, setter, property, value) {
  // Use setter method if present; otherwise, set the property directly.
  if (typeof object[setter] === 'function')
    object[setter](value);
  else
    object[property] = value;
}

describe('InboxControllerApi', function() {
    describe('createInbox', function() {
      it('should call createInbox successfully', function(done) {
        //uncomment below and update the code to test createInbox
        //instance.createInbox(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllInboxes', function() {
      it('should call deleteAllInboxes successfully', function(done) {
        //uncomment below and update the code to test deleteAllInboxes
        //instance.deleteAllInboxes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInbox', function() {
      it('should call deleteInbox successfully', function(done) {
        //uncomment below and update the code to test deleteInbox
        //instance.deleteInbox(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAllInboxes', function() {
      it('should call getAllInboxes successfully', function(done) {
        //uncomment below and update the code to test getAllInboxes
        //instance.getAllInboxes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmails', function() {
      it('should call getEmails successfully', function(done) {
        //uncomment below and update the code to test getEmails
        //instance.getEmails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInbox', function() {
      it('should call getInbox successfully', function(done) {
        //uncomment below and update the code to test getInbox
        //instance.getInbox(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInboxEmailsPaginated', function() {
      it('should call getInboxEmailsPaginated successfully', function(done) {
        //uncomment below and update the code to test getInboxEmailsPaginated
        //instance.getInboxEmailsPaginated(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInboxSentEmails', function() {
      it('should call getInboxSentEmails successfully', function(done) {
        //uncomment below and update the code to test getInboxSentEmails
        //instance.getInboxSentEmails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInboxTags', function() {
      it('should call getInboxTags successfully', function(done) {
        //uncomment below and update the code to test getInboxTags
        //instance.getInboxTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInboxes', function() {
      it('should call getInboxes successfully', function(done) {
        //uncomment below and update the code to test getInboxes
        //instance.getInboxes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendEmail', function() {
      it('should call sendEmail successfully', function(done) {
        //uncomment below and update the code to test sendEmail
        //instance.sendEmail(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setInboxFavourited', function() {
      it('should call setInboxFavourited successfully', function(done) {
        //uncomment below and update the code to test setInboxFavourited
        //instance.setInboxFavourited(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInbox', function() {
      it('should call updateInbox successfully', function(done) {
        //uncomment below and update the code to test updateInbox
        //instance.updateInbox(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
});